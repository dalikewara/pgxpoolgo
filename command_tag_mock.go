// Code generated by mockery v2.14.0. DO NOT EDIT.

package pgxpoolgo

import mock "github.com/stretchr/testify/mock"

// MockCommandTag is an autogenerated mock type for the CommandTag type
type MockCommandTag struct {
	mock.Mock
}

// Delete provides a mock function with given fields:
func (_m *MockCommandTag) Delete() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Insert provides a mock function with given fields:
func (_m *MockCommandTag) Insert() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RowsAffected provides a mock function with given fields:
func (_m *MockCommandTag) RowsAffected() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Select provides a mock function with given fields:
func (_m *MockCommandTag) Select() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *MockCommandTag) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Update provides a mock function with given fields:
func (_m *MockCommandTag) Update() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewMockCommandTag interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCommandTag creates a new instance of MockCommandTag. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCommandTag(t mockConstructorTestingTNewMockCommandTag) *MockCommandTag {
	mock := &MockCommandTag{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
